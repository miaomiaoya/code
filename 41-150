
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/**
 * Description: ${}
 * Author: wangcaixia01
 * Date: 2018/9/16
 * Time: 下午10:25
 */
public class TestSolu {

    public static void  main(String[] args) {
        int[] a = {1,2,0};
        int result = firstMissingPositive(a);
        System.out.println("#####result:" + result);

        String[] tokens = {"4", "13", "5", "/", "+"};
        String[] tokens2 = {"2", "1", "+", "3", "*"};
        String[] tokens3 = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
        int res = evalRPN(tokens3);
        System.out.println("#####resl: " + res);
    }

    public static int evalRPN(String[] tokens) {
        if (tokens == null || tokens.length == 0) {
            return 0;
        }
        if (tokens.length == 1) {
            return Integer.parseInt(tokens[0]);
        }
        int[] stack = new int[tokens.length];
        int top = -1;
        for (String token : tokens) {
            if (token.length() == 1 && !Character.isDigit((token.charAt(0)))) {
                char op = token.charAt(0);
                int a1 = stack[top--];
                int a2 = stack[top--];
                if (op == '+') stack[++top] = a2 + a1;
                if (op == '-') stack[++top] = a2 - a1;
                if (op == '*') stack[++top] = a2 * a1;
                if (op == '/') stack[++top] = a2 / a1;
            } else {
                stack[++top] = Integer.parseInt(token);
            }
        }
        return top == -1 ? 0 : stack[top];
    }

    public static int firstMissingPositive(int[] nums) {
        if (nums.length <= 0) {
            return 1;
        }
        int maxIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > maxIndex) {
                maxIndex = nums[i];
            }
        }
        int[] numIndex = new int[maxIndex + 2];
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= 0) {
                continue;
            } else {
                numIndex[nums[i]]++;
            }
        }
        for (int j = 1; j < numIndex.length; j++) {
            if (numIndex[j] == 0) {
                return j;
            }
        }
        return -1;
    }
}
